pipeline {
    agent any
    
    environment {
        REGISTRY = 'cloud-shop'
        NAMESPACE = 'cloud-shop'
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            parallel {
                stage('User Service Dependencies') {
                    steps {
                        dir('services/user-service') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Product Service Dependencies') {
                    steps {
                        dir('services/product-service') {
                            sh 'npm ci'
                        }
                    }
                }
                stage('Order Service Dependencies') {
                    steps {
                        dir('services/order-service') {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Test User Service') {
                    steps {
                        dir('services/user-service') {
                            sh 'npm test -- --ci --coverage'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'User Service Coverage'
                            ])
                        }
                    }
                }
                stage('Test Product Service') {
                    steps {
                        dir('services/product-service') {
                            sh 'npm test -- --ci --coverage'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'Product Service Coverage'
                            ])
                        }
                    }
                }
                stage('Test Order Service') {
                    steps {
                        dir('services/order-service') {
                            sh 'npm test -- --ci --coverage'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'Order Service Coverage'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build User Service') {
                    steps {
                        script {
                            docker.build("${REGISTRY}/user-service:${BUILD_NUMBER}", "./services/user-service")
                            docker.build("${REGISTRY}/user-service:latest", "./services/user-service")
                        }
                    }
                }
                stage('Build Product Service') {
                    steps {
                        script {
                            docker.build("${REGISTRY}/product-service:${BUILD_NUMBER}", "./services/product-service")
                            docker.build("${REGISTRY}/product-service:latest", "./services/product-service")
                        }
                    }
                }
                stage('Build Order Service') {
                    steps {
                        script {
                            docker.build("${REGISTRY}/order-service:${BUILD_NUMBER}", "./services/order-service")
                            docker.build("${REGISTRY}/order-service:latest", "./services/order-service")
                        }
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // In production, you would push to a real registry
                    echo 'Skipping push to registry (local development)'
                    // docker.withRegistry('https://registry.example.com', 'registry-credentials') {
                    //     docker.image("${REGISTRY}/user-service:${BUILD_NUMBER}").push()
                    //     docker.image("${REGISTRY}/product-service:${BUILD_NUMBER}").push()
                    //     docker.image("${REGISTRY}/order-service:${BUILD_NUMBER}").push()
                    // }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Update deployment files with new image tags
                    sh """
                        cp k8s/user-service/deployment.yaml k8s/user-service/deployment.yaml.bak
                        cp k8s/product-service/deployment.yaml k8s/product-service/deployment.yaml.bak
                        cp k8s/order-service/deployment.yaml k8s/order-service/deployment.yaml.bak
                        
                        sed -i 's|image: ${REGISTRY}/user-service:.*|image: ${REGISTRY}/user-service:${BUILD_NUMBER}|' k8s/user-service/deployment.yaml
                        sed -i 's|image: ${REGISTRY}/product-service:.*|image: ${REGISTRY}/product-service:${BUILD_NUMBER}|' k8s/product-service/deployment.yaml
                        sed -i 's|image: ${REGISTRY}/order-service:.*|image: ${REGISTRY}/order-service:${BUILD_NUMBER}|' k8s/order-service/deployment.yaml
                    """
                    
                    // Apply to Kubernetes
                    sh """
                        kubectl apply -f k8s/namespace.yaml
                        kubectl apply -f k8s/redis/
                        kubectl apply -f k8s/user-service/
                        kubectl apply -f k8s/product-service/
                        kubectl apply -f k8s/order-service/
                    """
                    
                    // Wait for rollout
                    sh """
                        kubectl rollout status deployment/user-service -n ${NAMESPACE}
                        kubectl rollout status deployment/product-service -n ${NAMESPACE}
                        kubectl rollout status deployment/order-service -n ${NAMESPACE}
                    """
                    
                    // Restore original files
                    sh """
                        mv k8s/user-service/deployment.yaml.bak k8s/user-service/deployment.yaml
                        mv k8s/product-service/deployment.yaml.bak k8s/product-service/deployment.yaml
                        mv k8s/order-service/deployment.yaml.bak k8s/order-service/deployment.yaml
                    """
                }
            }
        }
        
        stage('Health Check') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Get service endpoints
                    def nodeIP = sh(
                        script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}'",
                        returnStdout: true
                    ).trim()
                    
                    // Check services health
                    sh """
                        sleep 30
                        curl -f http://${nodeIP}:30081/health || exit 1
                        curl -f http://${nodeIP}:30082/health || exit 1
                        curl -f http://${nodeIP}:30083/health || exit 1
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded! All services deployed successfully.'
            // Send notification (Slack, email, etc.)
        }
        failure {
            echo 'Pipeline failed! Check the logs for errors.'
            // Send notification (Slack, email, etc.)
        }
    }
}